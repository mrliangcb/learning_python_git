
# 题一
# 一个整型数组里除两个数字之外，其他数字都出现了两次。请找出这个两个只出现一次的数字，时间复杂度O(n),空间复杂度O(1)
# 用异或的方法

print(12^12)#异或

# 取得数组第一个，然后跟2-末尾，一直累计异或




# 题二：
# 一个数组中除了一个数字只出现了一次，其他数字都出现了三次。请找出那个数字

#我们把所有数字的二进制表示都加起来，然后对每一位都mod3取余，
# 如果能被3整除，则要找的数字这一位是0
# 如果不能被3整除，则这一位是1

# 例如1011+1101=2112  表示每位的1的个数
# 获得每位数  https://zhidao.baidu.com/question/1050480605182576179.html

def get_char_bit(char,n):
	a=char>>(8-n)
	b=a&1

x = 0b10101010
get_bit = lambda char, n: (char >> (8-n)) & 1


x1=0b0110
x2=0b11
print('x1:',bin(x1))
print('x1第0位:',bin(x1&1))
x1=x1>>1
print('x1第1位:',bin(x1&0b1))
x1=x1>>1
print('x1第2位:',bin(x1&0b1))
x1=x1>>1
print('x1是否移到=0了:',x1==0)#所以停止循环
	


#  题三 一个数组，除了两个数字出现奇数次，其他数字都出现了偶数次，找出这两个数
# 看看xor之后，最低的1位是n，然后根据n=0和=1分成两组数，分别做xor就能得出











